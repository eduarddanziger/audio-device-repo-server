name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Get version from Git tags
        id: get_version
        run: |
          # Get the latest Release tag
          LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "No Release tag found. Using default version."
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "LATEST_TAG: $LATEST_TAG"
          # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
          echo "VERSION_NUMBER: $VERSION_NUMBER"
          # Get the distance since the latest tag
          DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
          echo "DISTANCE: $DISTANCE"
          # Append -RC<distance> if distance is greater than 0
          if [ "$DISTANCE" -gt 0 ]; then
            # Increment the third number
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
            # Add RC info
            DISTANCE=$(printf "%03d" "$DISTANCE")
            VERSION="$VERSION_NUMBER-RC$DISTANCE"
          else
            VERSION="$VERSION_NUMBER"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Start Codespace
        run: |
          PAT=${{ secrets.UNIVERSAL_PAT }}
          CS_DISPLAY_NAME="CodeSpaceMain"
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          GITHUB_API_URL="https://api.github.com"
          HEADERS=(
              "-H" "Authorization: token $PAT"
              "-H" "Accept: application/vnd.github+json"
          )
          
          echo "Try getting codespaces..."
          INFO_URL="$GITHUB_API_URL/user/codespaces"
          RESPONSE=$(curl -s "${HEADERS[@]}" "$INFO_URL")

          # Check if the response contains Codespaces
          if echo "$RESPONSE" | jq -e '.codespaces == null or .codespaces == []' > /dev/null; then
              echo "No codespaces found."
              exit 1
          fi
          
          echo "...Got codespaces. Try getting codespace name on display name..."
          CS_NAME=$(echo "$RESPONSE" | jq -r --arg NAME "$CS_DISPLAY_NAME" '.codespaces[] | select(.display_name == $NAME) | .name')
          if [ -z "$CS_NAME" ]; then
            echo "No codespace found with display name: $CS_DISPLAY_NAME"
            exit 1
          fi

          # Start the codespace
          echo "Starting codespace: $CS_NAME..."
          START_URL="$GITHUB_API_URL/user/codespaces/$CS_NAME/start"
          curl -X POST "${HEADERS[@]}" "$START_URL"
          echo "...Codespace started: $CS_NAME."

      - name: Create Release
        run: |
          VERS=${{ steps.get_version.outputs.VERSION }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$VERS" --title "AudioDeviceRepositoryServer $VERS" --notes "Release of Audio Device Repository Server $VERS"
