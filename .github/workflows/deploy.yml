name: Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history and tags
          submodules: true

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Get version from Git tags
        id: get_version
        run: |
          # Get the latest Release tag
          LATEST_TAG=$(git describe --tags --match "Release-*" --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "No Release tag found. Using default version."
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "LATEST_TAG: $LATEST_TAG"
          # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
          VERSION_NUMBER=$(echo "$LATEST_TAG" | sed 's/^Release-//')
          echo "VERSION_NUMBER: $VERSION_NUMBER"
          # Get the distance since the latest tag
          DISTANCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
          echo "DISTANCE: $DISTANCE"
          # Append -RC<distance> if distance is greater than 0
          if [ "$DISTANCE" -gt 0 ]; then
            # Increment the third number
            VERSION_NUMBER=$(echo "$VERSION_NUMBER" | awk -F. -v OFS=. '{$3++; print}')
            # Add RC info
            DISTANCE=$(printf "%03d" "$DISTANCE")
            VERSION="$VERSION_NUMBER-RC$DISTANCE"
          else
            VERSION="$VERSION_NUMBER"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      # - name: Start Codespace
      #   run: |
      #     PAT=${{ secrets.UNIVERSAL_PAT }}
      #     CS_DISPLAY_NAME="CodeSpaceMain"
      #     OWNER="${{ github.repository_owner }}"
      #     REPO="${{ github.event.repository.name }}"
      #     GITHUB_API_URL="https://api.github.com"
      #     HEADERS=(
      #         "-H" "Authorization: token $PAT"
      #         "-H" "Accept: application/vnd.github+json"
      #     )
      #
      #     echo "Try getting codespaces..."
      #     INFO_URL="$GITHUB_API_URL/user/codespaces"
      #     RESPONSE=$(curl -s "${HEADERS[@]}" "$INFO_URL")
      #
      #     # Check if the response contains Codespaces
      #     if echo "$RESPONSE" | jq -e '.codespaces == null or .codespaces == []' > /dev/null; then
      #         echo "No codespaces found."
      #         exit 1
      #     fi
      #
      #     echo "...Got codespaces. Try getting codespace name on display name..."
      #     CS_NAME=$(echo "$RESPONSE" | jq -r --arg NAME "$CS_DISPLAY_NAME" '.codespaces[] | select(.display_name == $NAME) | .name')
      #     if [ -z "$CS_NAME" ]; then
      #       echo "No codespace found with display name: $CS_DISPLAY_NAME"
      #       exit 1
      #     fi
      #
      #     # Start the codespace
      #     echo "Starting codespace: $CS_NAME..."
      #     START_URL="$GITHUB_API_URL/user/codespaces/$CS_NAME/start"
      #     curl -X POST "${HEADERS[@]}" "$START_URL"
      #     echo "...Codespace started: $CS_NAME."

      - name: Copy Release Notes to artifacts 
        run: |
          # Create the artifacts directory if it doesn't exist
          mkdir -p artifacts
          # Set variables
          VERSION=${{ steps.get_version.outputs.VERSION }}
          DATE=$(TZ=Europe/Berlin date +"%d.%m.%Y %H:%M:%S%z")

          perl -pe "s/\\\$date\\\$/$DATE/g; s/\\\$version\\\$/$VERSION/g" \
              AudioDeviceRepoServer-Release-Notes.md > artifacts/AudioDeviceRepoServer-Release-Notes.md

      - name: Upload entire artifacts directory
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: artifacts

      - name: Create Release
        run: |
          VERS=${{ steps.get_version.outputs.VERSION }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh release create "$VERS" --title "AudioDeviceRepoServer $VERS" --notes "Release of Audio Device Repository Server $VERS"
          gh release upload "$VERS" artifacts/*.*

      - name: Install LibMan CLI
        run: dotnet tool install -g Microsoft.Web.LibraryManager.Cli

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build and publish
        run: |
            dotnet build --configuration Release
            dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Deploy to Azure
        uses: azure/webapps-deploy@v2
        with:
            app-name: 'sdrepo'
            publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
            package: ${{env.DOTNET_ROOT}}/myapp

